Elm.Lesson5 = Elm.Lesson5 || {};
Elm.Lesson5.make = function (_elm) {
   "use strict";
   _elm.Lesson5 = _elm.Lesson5 || {};
   if (_elm.Lesson5.values)
   return _elm.Lesson5.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Lesson5",
   $Basics = Elm.Basics.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var faClass = F2(function (question,
   bid) {
      return function () {
         var mbox = $List.head(A2($List.filter,
         function (_v0) {
            return function () {
               switch (_v0.ctor)
               {case "_Tuple2":
                  return _U.eq(_v0._0,bid);}
               _U.badCase($moduleName,
               "on line 162, column 49 to 58");
            }();
         },
         question.boxes));
         return function () {
            switch (mbox.ctor)
            {case "Just":
               switch (mbox._0.ctor)
                 {case "_Tuple2":
                    return mbox._0._1.completed ? "fa fa-check-square-o" : mbox._0._1.attempted ? "fa fa-square-o" : "fa fa-square-o";}
                 break;
               case "Nothing": return "";}
            _U.badCase($moduleName,
            "between lines 164 and 177");
         }();
      }();
   });
   var completionClass = F2(function (question,
   bid) {
      return function () {
         var mbox = $List.head(A2($List.filter,
         function (_v8) {
            return function () {
               switch (_v8.ctor)
               {case "_Tuple2":
                  return _U.eq(_v8._0,bid);}
               _U.badCase($moduleName,
               "on line 144, column 49 to 58");
            }();
         },
         question.boxes));
         return function () {
            switch (mbox.ctor)
            {case "Just":
               switch (mbox._0.ctor)
                 {case "_Tuple2":
                    return mbox._0._1.completed ? "completed" : mbox._0._1.attempted ? "incorrect" : "new-question";}
                 break;
               case "Nothing": return "";}
            _U.badCase($moduleName,
            "between lines 146 and 157");
         }();
      }();
   });
   var targetToSubmission = F3(function (address,
   f,
   val) {
      return function () {
         var mNumVal = $Result.toMaybe($String.toInt(val));
         return A2($Signal.message,
         address,
         f(mNumVal));
      }();
   });
   var boxesComplete = function (q) {
      return A2($List.all,
      function (_v16) {
         return function () {
            switch (_v16.ctor)
            {case "_Tuple2":
               return _v16._1.completed;}
            _U.badCase($moduleName,
            "on line 98, column 41 to 52");
         }();
      },
      q.boxes);
   };
   var findLatestAnswered = function (qs) {
      return $Maybe.withDefault(0)($List.maximum($List.map(function (_) {
         return _.id;
      })($List.filter(boxesComplete)(qs))));
   };
   var updateBox = F3(function (wantedBid,
   completion,
   _v20) {
      return function () {
         switch (_v20.ctor)
         {case "_Tuple2":
            return _U.eq(_v20._0,
              wantedBid) ? {ctor: "_Tuple2"
                           ,_0: _v20._0
                           ,_1: _U.replace([["attempted"
                                            ,true]
                                           ,["completed",completion]],
                           _v20._1)} : {ctor: "_Tuple2"
                                       ,_0: _v20._0
                                       ,_1: _v20._1};}
         _U.badCase($moduleName,
         "between lines 77 and 81");
      }();
   });
   var updateQuestion = F3(function (val,
   _v24,
   question) {
      return function () {
         switch (_v24.ctor)
         {case "_Tuple2":
            return _U.eq(question.id,
              _v24._0) ? function () {
                 var completionVals = _L.fromArray([_U.eq(question.num11 + question.num12,
                                                   val)
                                                   ,_U.eq(question.num22 - question.num11 - question.num12,
                                                   val)]);
                 var updatedBoxes = A3($List.map2,
                 updateBox(_v24._1),
                 completionVals,
                 question.boxes);
                 return _U.replace([["boxes"
                                    ,updatedBoxes]],
                 question);
              }() : question;}
         _U.badCase($moduleName,
         "between lines 85 and 95");
      }();
   });
   var completed = $Signal.mailbox(false);
   var signalCompletion = Elm.Native.Port.make(_elm).outboundSignal("signalCompletion",
   function (v) {
      return v;
   },
   completed.signal);
   var SendCompletion = {ctor: "SendCompletion"};
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "SendCompletion":
            return {ctor: "_Tuple2"
                   ,_0: _U.replace([["completed"
                                    ,true]],
                   model)
                   ,_1: $Effects.none};
            case "Submission":
            return function () {
                 switch (action._2.ctor)
                 {case "Just":
                    return function () {
                         var updatedQuestions = A2($List.map,
                         A2(updateQuestion,
                         action._2._0,
                         {ctor: "_Tuple2"
                         ,_0: action._0
                         ,_1: action._1}),
                         model.questions);
                         var newestCompletion = findLatestAnswered(updatedQuestions);
                         var completion = _U.cmp(newestCompletion + 1,
                         $List.length(model.questions)) > 0;
                         var completionAction = completion ? $Effects.task($Task.map($Basics.always(SendCompletion))(A2($Signal.send,
                         completed.address,
                         true))) : $Effects.none;
                         return {ctor: "_Tuple2"
                                ,_0: _U.replace([["questions"
                                                 ,updatedQuestions]
                                                ,["qAt",newestCompletion + 1]],
                                model)
                                ,_1: completionAction};
                      }();
                    case "Nothing":
                    return {ctor: "_Tuple2"
                           ,_0: model
                           ,_1: $Effects.none};}
                 _U.badCase($moduleName,
                 "between lines 112 and 130");
              }();}
         _U.badCase($moduleName,
         "between lines 109 and 130");
      }();
   });
   var Submission = F3(function (a,
   b,
   c) {
      return {ctor: "Submission"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var viewQuestion = F2(function (address,
   question) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("question")]),
      _L.fromArray([A2($Html.div,
                   _L.fromArray([]),
                   _L.fromArray([A2($Html.math,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text(A2($Basics._op["++"],
                   $Basics.toString(question.num11),
                   A2($Basics._op["++"],
                   " + ",
                   A2($Basics._op["++"],
                   $Basics.toString(question.num12),
                   " = x"))))]))]))
                   ,A2($Html.div,
                   _L.fromArray([]),
                   _L.fromArray([A2($Html.math,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text(A2($Basics._op["++"],
                   "x + y = ",
                   $Basics.toString(question.num22)))]))]))
                   ,A2($Html.div,
                   _L.fromArray([]),
                   _L.fromArray([A2($Html.math,
                                _L.fromArray([]),
                                _L.fromArray([$Html.text("x = ")]))
                                ,A2($Html.input,
                                _L.fromArray([$Html$Attributes.type$("text")
                                             ,$Html$Attributes.$class(A2(completionClass,
                                             question,
                                             1))
                                             ,A3($Html$Events.on,
                                             "change",
                                             $Html$Events.targetValue,
                                             A2(targetToSubmission,
                                             address,
                                             function (x) {
                                                return A3(Submission,
                                                question.id,
                                                1,
                                                x);
                                             }))]),
                                _L.fromArray([]))
                                ,A2($Html.button,
                                _L.fromArray([$Html$Attributes.$class(A2($Basics._op["++"],
                                "btn btn-side ",
                                A2(completionClass,
                                question,
                                1)))]),
                                _L.fromArray([A3($Html.node,
                                "i",
                                _L.fromArray([$Html$Attributes.$class(A2(faClass,
                                question,
                                1))]),
                                _L.fromArray([]))]))]))
                   ,A2($Html.div,
                   _L.fromArray([]),
                   _L.fromArray([A2($Html.math,
                                _L.fromArray([]),
                                _L.fromArray([$Html.text("y = ")]))
                                ,A2($Html.input,
                                _L.fromArray([$Html$Attributes.type$("text")
                                             ,$Html$Attributes.$class(A2(completionClass,
                                             question,
                                             2))
                                             ,A3($Html$Events.on,
                                             "change",
                                             $Html$Events.targetValue,
                                             A2(targetToSubmission,
                                             address,
                                             function (y) {
                                                return A3(Submission,
                                                question.id,
                                                2,
                                                y);
                                             }))]),
                                _L.fromArray([]))
                                ,A2($Html.button,
                                _L.fromArray([$Html$Attributes.$class(A2($Basics._op["++"],
                                "btn btn-side btn-inverse ",
                                A2(completionClass,
                                question,
                                2)))]),
                                _L.fromArray([A3($Html.node,
                                "i",
                                _L.fromArray([$Html$Attributes.$class(A2(faClass,
                                question,
                                2))]),
                                _L.fromArray([]))]))]))]));
   });
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("specificLesson")]),
      $List.take(model.qAt)($List.map(viewQuestion(address))(model.questions)));
   });
   var mkBox = function (bid) {
      return {ctor: "_Tuple2"
             ,_0: bid
             ,_1: {_: {}
                  ,attempted: false
                  ,completed: false}};
   };
   var mkQuestion = F4(function (x,
   y,
   z,
   id) {
      return {_: {}
             ,boxes: _L.fromArray([mkBox(1)
                                  ,mkBox(2)])
             ,id: id
             ,num11: x
             ,num12: y
             ,num22: z};
   });
   var init = {_: {}
              ,completed: false
              ,qAt: 1
              ,questions: _L.fromArray([A4(mkQuestion,
                                       2,
                                       3,
                                       9,
                                       1)
                                       ,A4(mkQuestion,5,7,21,2)
                                       ,A4(mkQuestion,40,1,42,3)])};
   var app = $StartApp.start({_: {}
                             ,init: {ctor: "_Tuple2"
                                    ,_0: init
                                    ,_1: $Effects.none}
                             ,inputs: _L.fromArray([])
                             ,update: update
                             ,view: view});
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",
   app.tasks);
   var main = app.html;
   var Question = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,boxes: d
             ,id: e
             ,num11: a
             ,num12: b
             ,num22: c};
   });
   var Model = F3(function (a,
   b,
   c) {
      return {_: {}
             ,completed: c
             ,qAt: b
             ,questions: a};
   });
   var InputBox = F2(function (a,
   b) {
      return {_: {}
             ,attempted: b
             ,completed: a};
   });
   _elm.Lesson5.values = {_op: _op
                         ,InputBox: InputBox
                         ,Model: Model
                         ,Question: Question
                         ,mkBox: mkBox
                         ,mkQuestion: mkQuestion
                         ,init: init
                         ,Submission: Submission
                         ,SendCompletion: SendCompletion
                         ,completed: completed
                         ,updateBox: updateBox
                         ,updateQuestion: updateQuestion
                         ,boxesComplete: boxesComplete
                         ,findLatestAnswered: findLatestAnswered
                         ,update: update
                         ,targetToSubmission: targetToSubmission
                         ,completionClass: completionClass
                         ,faClass: faClass
                         ,viewQuestion: viewQuestion
                         ,view: view
                         ,app: app
                         ,main: main};
   return _elm.Lesson5.values;
};