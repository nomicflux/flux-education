Elm.Lesson2 = Elm.Lesson2 || {};
Elm.Lesson2.make = function (_elm) {
   "use strict";
   _elm.Lesson2 = _elm.Lesson2 || {};
   if (_elm.Lesson2.values)
   return _elm.Lesson2.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Lesson2",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var completionClass = function (question) {
      return question.completed ? $Html$Attributes.$class("completed") : question.attempted ? $Html$Attributes.$class("incorrect") : $Html$Attributes.$class("new-question");
   };
   var update = F2(function (_v0,
   model) {
      return function () {
         switch (_v0.ctor)
         {case "Submission":
            return function () {
                 switch (_v0._1.ctor)
                 {case "Just":
                    return function () {
                         var updateQuestion = function (question) {
                            return _U.eq(question.id,
                            _v0._0) ? function () {
                               var completed = _U.eq(question.num1 + question.num2,
                               _v0._1._0);
                               return _U.replace([["attempted"
                                                  ,true]
                                                 ,["completed",completed]],
                               question);
                            }() : question;
                         };
                         var updatedQuestions = A2($List.map,
                         updateQuestion,
                         model.questions);
                         var newestCompletion = $Maybe.withDefault(0)($List.maximum($List.map(function (_) {
                            return _.id;
                         })($List.filter(function (_) {
                            return _.completed;
                         })(updatedQuestions))));
                         return _U.replace([["questions"
                                            ,updatedQuestions]
                                           ,["qAt",newestCompletion + 1]],
                         model);
                      }();
                    case "Nothing": return model;}
                 _U.badCase($moduleName,
                 "between lines 54 and 77");
              }();}
         _U.badCase($moduleName,
         "between lines 54 and 77");
      }();
   });
   var Submission = F2(function (a,
   b) {
      return {ctor: "Submission"
             ,_0: a
             ,_1: b};
   });
   var targetToSubmission = F3(function (address,
   id,
   val) {
      return function () {
         var mNumVal = $Result.toMaybe($String.toInt(val));
         return A2($Signal.message,
         address,
         A2(Submission,id,mNumVal));
      }();
   });
   var viewQuestion = F2(function (address,
   question) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("question")]),
      _L.fromArray([A2($Html.div,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text($Basics.toString(question.num1))
                                ,$Html.text(" + ")
                                ,$Html.text($Basics.toString(question.num2))
                                ,$Html.text(" = x")]))
                   ,A2($Html.div,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text("x  = ")
                                ,A2($Html.input,
                                _L.fromArray([$Html$Attributes.type$("text")
                                             ,completionClass(question)
                                             ,A3($Html$Events.on,
                                             "change",
                                             $Html$Events.targetValue,
                                             A2(targetToSubmission,
                                             address,
                                             question.id))]),
                                _L.fromArray([]))]))]));
   });
   var view = F2(function (address,
   model) {
      return function () {
         var completion = _U.cmp(model.qAt,
         $List.length(model.questions)) > 0;
         var completionDiv = completion ? A2($Html.div,
         _L.fromArray([$Html$Attributes.$class("completion")]),
         _L.fromArray([A2($Html.a,
         _L.fromArray([$Html$Attributes.href("Lesson3.html")]),
         _L.fromArray([$Html.text("Go to Lesson 3")]))])) : A2($Html.div,
         _L.fromArray([$Html$Attributes.$class("noncompletion completion")]),
         _L.fromArray([$Html.text("Complete all questions before moving on")]));
         return A2($Html.section,
         _L.fromArray([$Html$Attributes.$class("jumbotron lesson2")]),
         A2($Basics._op["++"],
         _L.fromArray([A2($Html.h1,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("Lesson 2")]))
                      ,A2($Html.h2,
                      _L.fromArray([$Html$Attributes.$class("keyphrase")]),
                      _L.fromArray([$Html.text(model.phrase)]))]),
         A2($Basics._op["++"],
         $List.take(model.qAt)($List.map(viewQuestion(address))(model.questions)),
         _L.fromArray([completionDiv]))));
      }();
   });
   var mkQuestion = F3(function (x,
   y,
   id) {
      return {_: {}
             ,attempted: false
             ,completed: false
             ,id: id
             ,num1: x
             ,num2: y};
   });
   var init = {_: {}
              ,phrase: "An X doesn\'t change anything."
              ,qAt: 1
              ,questions: _L.fromArray([A3(mkQuestion,
                                       2,
                                       3,
                                       1)
                                       ,A3(mkQuestion,5,7,2)
                                       ,A3(mkQuestion,40,2,3)])};
   var main = $StartApp$Simple.start({_: {}
                                     ,model: init
                                     ,update: update
                                     ,view: view});
   var Question = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,attempted: c
             ,completed: d
             ,id: e
             ,num1: a
             ,num2: b};
   });
   var Model = F3(function (a,
   b,
   c) {
      return {_: {}
             ,phrase: a
             ,qAt: c
             ,questions: b};
   });
   _elm.Lesson2.values = {_op: _op
                         ,Model: Model
                         ,Question: Question
                         ,mkQuestion: mkQuestion
                         ,init: init
                         ,Submission: Submission
                         ,update: update
                         ,targetToSubmission: targetToSubmission
                         ,completionClass: completionClass
                         ,viewQuestion: viewQuestion
                         ,view: view
                         ,main: main};
   return _elm.Lesson2.values;
};